{
  "contractName": "ERC165Mock",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/mocks/ERC165Mock.sol\":\"ERC165Mock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/mocks/ERC165Mock.sol\":{\"keccak256\":\"0x2118c45517175ed236abd89b7ac385645741f8a121ce1acac15578e54e16c79c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8899b7671a5bd5dd149ae44d9264827caa16fb9930bb8e5bf0e88aeab859c55\",\"dweb:/ipfs/Qmd5BHa1SSW8Jkp6YiEbXSz722YYY7aKRxzDHLTbjz1xqd\"]},\"/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d10e1d9b26042424789246603906ad06143bf9a928f4e99de8b5e3bdc662f549\",\"dweb:/ipfs/Qmejonoaj5MLekPus229rJQHcC6E9dz2xorjHJR84fMfmn\"]},\"/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6\",\"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101b7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004a600480360381019061004591906100df565b610060565b6040516100579190610117565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000813590506100d98161016a565b92915050565b6000602082840312156100f157600080fd5b60006100ff848285016100ca565b91505092915050565b61011181610132565b82525050565b600060208201905061012c6000830184610108565b92915050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6101738161013e565b811461017e57600080fd5b5056fea2646970667358221220cd8c4023ed9a101f0039e5ce3295371c0cac1d148c1469243fe7272b8ebe62b864736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004a600480360381019061004591906100df565b610060565b6040516100579190610117565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000813590506100d98161016a565b92915050565b6000602082840312156100f157600080fd5b60006100ff848285016100ca565b91505092915050565b61011181610132565b82525050565b600060208201905061012c6000830184610108565b92915050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6101738161013e565b811461017e57600080fd5b5056fea2646970667358221220cd8c4023ed9a101f0039e5ce3295371c0cac1d148c1469243fe7272b8ebe62b864736f6c63430008030033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:1121:134",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "58:86:134",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "68:29:134",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "90:6:134"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "77:12:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "77:20:134"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "68:5:134"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "132:5:134"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_bytes4",
                      "nodeType": "YulIdentifier",
                      "src": "106:25:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "106:32:134"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "106:32:134"
                }
              ]
            },
            "name": "abi_decode_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "36:6:134",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "44:3:134",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "52:5:134",
                "type": ""
              }
            ],
            "src": "7:137:134"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "215:195:134",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "261:16:134",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "270:1:134",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "273:1:134",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "263:6:134"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "263:12:134"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "263:12:134"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "236:7:134"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "245:9:134"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "232:3:134"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "232:23:134"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "257:2:134",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "228:3:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "228:32:134"
                  },
                  "nodeType": "YulIf",
                  "src": "225:2:134"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "287:116:134",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "302:15:134",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "316:1:134",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "306:6:134",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "331:62:134",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "365:9:134"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "376:6:134"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "361:3:134"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "361:22:134"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "385:7:134"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_bytes4",
                          "nodeType": "YulIdentifier",
                          "src": "341:19:134"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "341:52:134"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "331:6:134"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "185:9:134",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "196:7:134",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "208:6:134",
                "type": ""
              }
            ],
            "src": "150:260:134"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "475:50:134",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "492:3:134"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "512:5:134"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_bool",
                          "nodeType": "YulIdentifier",
                          "src": "497:14:134"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "497:21:134"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "485:6:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "485:34:134"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "485:34:134"
                }
              ]
            },
            "name": "abi_encode_t_bool_to_t_bool_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "463:5:134",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "470:3:134",
                "type": ""
              }
            ],
            "src": "416:109:134"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "623:118:134",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "633:26:134",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "645:9:134"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "656:2:134",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "641:3:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "641:18:134"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "633:4:134"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "707:6:134"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "720:9:134"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "731:1:134",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "716:3:134"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "716:17:134"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_bool_to_t_bool_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "669:37:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "669:65:134"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "669:65:134"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "595:9:134",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "607:6:134",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "618:4:134",
                "type": ""
              }
            ],
            "src": "531:210:134"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "789:48:134",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "799:32:134",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "824:5:134"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "817:6:134"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "817:13:134"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "810:6:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "810:21:134"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "799:7:134"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_bool",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "771:5:134",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "781:7:134",
                "type": ""
              }
            ],
            "src": "747:90:134"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "887:105:134",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "897:89:134",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "912:5:134"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "919:66:134",
                        "type": "",
                        "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "908:3:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "908:78:134"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "897:7:134"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "869:5:134",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "879:7:134",
                "type": ""
              }
            ],
            "src": "843:149:134"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1040:78:134",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1096:16:134",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1105:1:134",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1108:1:134",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1098:6:134"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1098:12:134"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1098:12:134"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1063:5:134"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1087:5:134"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "1070:16:134"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1070:23:134"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1060:2:134"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1060:34:134"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1053:6:134"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1053:42:134"
                  },
                  "nodeType": "YulIf",
                  "src": "1050:2:134"
                }
              ]
            },
            "name": "validator_revert_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1033:5:134",
                "type": ""
              }
            ],
            "src": "998:120:134"
          }
        ]
      },
      "contents": "{\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n}\n",
      "id": 134,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "103:33:23:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "103:33:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;763:155:123;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;848:4;886:25;871:40;;;:11;:40;;;;864:47;;763:155;;;:::o;7:137:134:-;;90:6;77:20;68:29;;106:32;132:5;106:32;:::i;:::-;58:86;;;;:::o;150:260::-;;257:2;245:9;236:7;232:23;228:32;225:2;;;273:1;270;263:12;225:2;316:1;341:52;385:7;376:6;365:9;361:22;341:52;:::i;:::-;331:62;;287:116;215:195;;;;:::o;416:109::-;497:21;512:5;497:21;:::i;:::-;492:3;485:34;475:50;;:::o;531:210::-;;656:2;645:9;641:18;633:26;;669:65;731:1;720:9;716:17;707:6;669:65;:::i;:::-;623:118;;;;:::o;747:90::-;;824:5;817:13;810:21;799:32;;789:48;;;:::o;843:149::-;;919:66;912:5;908:78;897:89;;887:105;;;:::o;998:120::-;1070:23;1087:5;1070:23;:::i;:::-;1063:5;1060:34;1050:2;;1108:1;1105;1098:12;1050:2;1040:78;:::o",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165.sol\";\n\ncontract ERC165Mock is ERC165 {\n}\n",
  "sourcePath": "/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/mocks/ERC165Mock.sol",
  "ast": {
    "absolutePath": "/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/mocks/ERC165Mock.sol",
    "exportedSymbols": {
      "ERC165": [
        15547
      ],
      "ERC165Mock": [
        2915
      ],
      "IERC165": [
        15873
      ]
    },
    "id": 2916,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2911,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:23"
      },
      {
        "absolutePath": "/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/utils/introspection/ERC165.sol",
        "file": "../utils/introspection/ERC165.sol",
        "id": 2912,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2916,
        "sourceUnit": 15548,
        "src": "58:43:23",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2913,
              "name": "ERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 15547,
              "src": "126:6:23"
            },
            "id": 2914,
            "nodeType": "InheritanceSpecifier",
            "src": "126:6:23"
          }
        ],
        "contractDependencies": [
          15547,
          15873
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 2915,
        "linearizedBaseContracts": [
          2915,
          15547,
          15873
        ],
        "name": "ERC165Mock",
        "nameLocation": "112:10:23",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 2916,
        "src": "103:33:23"
      }
    ],
    "src": "33:104:23"
  },
  "legacyAST": {
    "absolutePath": "/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/mocks/ERC165Mock.sol",
    "exportedSymbols": {
      "ERC165": [
        15547
      ],
      "ERC165Mock": [
        2915
      ],
      "IERC165": [
        15873
      ]
    },
    "id": 2916,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2911,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:23"
      },
      {
        "absolutePath": "/Users/brendanmorrison/Code/Nftrees/contracts/OpenZepplin/utils/introspection/ERC165.sol",
        "file": "../utils/introspection/ERC165.sol",
        "id": 2912,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2916,
        "sourceUnit": 15548,
        "src": "58:43:23",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2913,
              "name": "ERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 15547,
              "src": "126:6:23"
            },
            "id": 2914,
            "nodeType": "InheritanceSpecifier",
            "src": "126:6:23"
          }
        ],
        "contractDependencies": [
          15547,
          15873
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 2915,
        "linearizedBaseContracts": [
          2915,
          15547,
          15873
        ],
        "name": "ERC165Mock",
        "nameLocation": "112:10:23",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 2916,
        "src": "103:33:23"
      }
    ],
    "src": "33:104:23"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.3+commit.8d00100c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-05-20T18:36:22.836Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}